

- name: Kubernetes | Control Plane | Scheduler | Download
  become: yes
  script: "./scripts/download_kubernetes_component '{{ item }}' '{{ kubernetes_version }}'"
  with_items:
  - kube-scheduler
  args:
    creates: /usr/bin/{{ item }}
  when: "'masters' in group_names"
  tags:
  - download_kubernetes_control_plane
  - download_scheduler


- name: Kubernetes | Control Plane | Scheduler | API authentication | Client Certificate | generate
  when: "'localhost' in group_names"
  tags:
  - generate_certificates
  - generate_client_certificates
  - generate_kube_scheduler_client_certificate
  import_role:
    name: client-cert
  vars:
    certificate_CN: "system:kube-scheduler"
    certificate_O: "{{ certificate_CN }}"
    client_cert_server_name: "api_server"
    client_cert_parent_ca_cert_file: "{{ root_ca_cert_file }}"
    client_cert_parent_ca_key_file: "{{ root_ca_key_file }}"
    client_cert_output_dir: "{{ pki_dir }}/kube_scheduler"

- name: Kubernetes | Control Plane | Scheduler | API authentication | Client Certificate | distribute
  copy:
    src: "{{ item.src }}"
    dest: "{{ ansible_env.HOME }}/{{ item.dest_filename if ('dest_filename' in item) else (item.src | basename) }}"
    mode: 0400
  with_items:
  - { src: "{{ root_ca_cert_file }}" }
  - { src: "{{ pki_dir }}/kube_scheduler/api_server-client.pem", dest_filename: "kube_scheduler-api_server-client.pem" }
  - { src: "{{ pki_dir }}/kube_scheduler/api_server-client-key.pem", dest_filename: "kube_scheduler-api_server-client-key.pem" }
  when: "'masters' in group_names"
  tags:
  - distribute_certificates
  - distribute_client_certificates
  - distribute_kube_scheduler_client_certificate


- name: Kubernetes | Control Plane | Scheduler | API authentication | Configure
  when: "'masters' in group_names"
  tags:
  - distribute_certificates
  - distribute_client_certificates
  - distribute_kube_scheduler_client_certificate
  block: 
  - name: Kubernetes | Control Plane | Scheduler | API authentication | Download kubectl
    become: yes
    script: "./scripts/download_kubernetes_component '{{ item }}' '{{ kubernetes_version }}'"
    with_items:
    - kubectl
    args:
      creates: /usr/bin/{{ item }}

  - name: Kubernetes | Control Plane | Scheduler | API authentication | Configure api server location
    shell: >
      kubectl config set-cluster {{ kubernetes_cluster_id }} \
      --certificate-authority={{ ansible_env.HOME }}/ca.pem \
      --embed-certs=true \
      --server=https://{{ kubernetes_api_ip_address }}:6443 \
      --kubeconfig={{ ansible_env.HOME }}/scheduler.kubeconfig

  - name: Kubernetes | Control Plane | Scheduler | API authentication | Configure user credentials
    shell: >
      kubectl config set-credentials system:node:{{ inventory_hostname }} \
        --client-certificate={{ ansible_env.HOME }}/kube_scheduler-api_server-client.pem \
        --client-key={{ ansible_env.HOME }}/kube_scheduler-api_server-client-key.pem \
        --embed-certs=true \
        --kubeconfig={{ ansible_env.HOME }}/scheduler.kubeconfig

  - name: Kubernetes | Control Plane | Scheduler | API authentication | Configure default context
    shell: >
      kubectl config set-context default \
        --cluster={{ kubernetes_cluster_id }} \
        --user=system:node:{{ inventory_hostname }} \
        --kubeconfig={{ ansible_env.HOME }}/scheduler.kubeconfig

  - name: Kubernetes | Control Plane | Scheduler | API authentication | Use default context
    shell: >
      kubectl config use-context default --kubeconfig={{ ansible_env.HOME }}/scheduler.kubeconfig





- name: Kubernetes | Control Plane | Scheduler | Service | Create
  when: "'masters' in group_names"
  tags:
  - start_scheduler
  become: yes
  copy: 
    dest: /etc/systemd/system/kube-scheduler.service
    content: |
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/bin/kube-scheduler \
        --leader-elect=true \
        --kubeconfig={{ ansible_env.HOME }}/scheduler.kubeconfig \
        --master=http://127.0.0.1:8080 \
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Kubernetes | Control Plane | Scheduler | Service | Start
  when: "'masters' in group_names"
  tags:
  - start_scheduler
  become: yes
  systemd:
    name: kube-scheduler
    enabled: yes
    state: started
    daemon_reload: yes
