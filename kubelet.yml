---

# we want to generate a client cert for every worker
# so we need to loop over workers
# therefore, we can't use import task.
# Also, include_role does not support tags
# so we need to wrap it in a block
- name: Kubernetes | Workers | Kubelet | API Authentication | Client Certificate
  when: "'localhost' in group_names"
  tags:
  - generate_certificates
  - generate_client_certificates
  - generate_kubelet_client_certificate
  block:
  - include_role:
      name: client-cert
    vars:
      client_cert_CN: system:node:{{ item }}
      client_cert_O: system:nodes
      client_cert_server_name: api_server
      client_cert_parent_ca_cert_file: "{{ root_ca_cert_file }}"
      client_cert_parent_ca_key_file: "{{ root_ca_key_file }}"
      client_cert_output_dir: "{{ pki_dir }}/kubelet/{{ item }}"
      client_cert_hostnames: "{{ hostvars[item].ansible_all_ipv4_addresses | union([ item ]) }}"
    with_items: "{{ kubernetes_workers }}"
  
- name: Kubernetes | Workers | Kubelet | API authentication | Distribute the client certificate
  copy:
    src: "{{ item.src }}"
    dest: "{{ ansible_env.HOME }}/{{ item.dest_filename if ('dest_filename' in item) else (item.src | basename) }}"
    mode: 0400
  with_items:
  - { src: "{{ root_ca_cert_file }}" }
  - { src: "{{ pki_dir }}/kubelet/{{ inventory_hostname }}/api_server-client.pem", dest_filename: "kubelet.pem" }
  - { src: "{{ pki_dir }}/kubelet/{{ inventory_hostname }}/api_server-client-key.pem", dest_filename: "kubelet-key.pem" }
  when: "'workers' in group_names"
  tags:
  - distribute_certificates
  - distribute_client_certificates
  - distribute_kubelet_client_certificate

- name: Kubernetes | Workers | Kubelet | API authentication | Configure
  when: "'workers' in group_names"
  tags:
  - configure_kubelet_access_to_the_api_server
  block: 
  - name: Kubernetes | Workers | Kubelet | API authentication | Configure api server location
    shell: >
      kubectl config set-cluster {{ kubernetes_cluster_id }} \
      --certificate-authority={{ ansible_env.HOME }}/ca.pem \
      --embed-certs=true \
      --server=https://{{ kubernetes_api_ip_address }}:6443 \
      --kubeconfig={{ ansible_env.HOME }}/kubelet.kubeconfig

  - name: Kubernetes | Workers | Kubelet | API authentication | Configure user credentials
    shell: >
      kubectl config set-credentials system:node:{{ inventory_hostname }} \
        --client-certificate={{ ansible_env.HOME }}/kubelet.pem \
        --client-key={{ ansible_env.HOME }}/kubelet-key.pem \
        --embed-certs=true \
        --kubeconfig={{ ansible_env.HOME }}/kubelet.kubeconfig

  - name: Kubernetes | Workers | Kubelet | API authentication | Configure default context
    shell: >
      kubectl config set-context default \
        --cluster={{ kubernetes_cluster_id }} \
        --user=system:node:{{ inventory_hostname }} \
        --kubeconfig={{ ansible_env.HOME }}/kubelet.kubeconfig

  - name: Kubernetes | Workers | Kubelet | API authentication | Use default context
    shell: >
      kubectl config use-context default --kubeconfig={{ ansible_env.HOME }}/kubelet.kubeconfig
  
