
- name: Kubernetes | Control Plane | API Server | Generate the server certificate
  when: "'localhost' in group_names"
  tags:
  - generate_certificates
  - generate_server_certificates
  - generate_api_server_certificate
  block:
  - name: Kubernetes | Control Plane | API Server | Server Certificate | Require the Root CA to be accessible
    block:
    - name: Kubernetes | Control Plane | API Server | Server Certificate | stat the required Root CA files
      stat:
        path: "{{ item }}"
      with_items: 
      - "{{ root_ca_cert_file }}"
      - "{{ root_ca_key_file }}"
      register: root_ca_files_stat_result

    - name: Kubernetes | Control Plane | API Server | Server Certificate | the required Root CA files must exist
      assert:
        that: "{{ root_ca_files_stat_result.results | map(attribute='stat') | list | selectattr('exists', 'sameas', true) | list | length == root_ca_files_stat_result.results | length }}"
        fail_msg: "you need to generate the Root CA in {{ root_ca_dir }}"

  - name: Kubernetes | Control Plane | API Server | Server Certificate | create the work directories
    file:
      path: "{{ pki_dir }}/api_server-server_cert"
      state: directory
      recurse: yes

  - name: Kubernetes | Control Plane | API Server | Server Certificate | build the signing configuration
    copy:
      dest: "{{ pki_dir }}/api_server-server_cert/signing-config.json"
      content: |
        {
          "signing": {
            "default": {
              "expiry": "8760h"
            },
            "profiles": {
              "kubernetes": {
                "usages": ["signing", "key encipherment", "server auth", "client auth"],
                "expiry": "8760h"
              }
            }
          }
        }
      mode: 0600

  - name: Kubernetes | Control Plane | API Server | Server Certificate | build the CSRs (Certificate Signing Requests)
    copy:
      dest: "{{ pki_dir }}/api_server-server_cert/csr.json"
      content: |
        {
          "CN": "kubernetes",
          "key": {
            "algo": "rsa",
            "size": 2048
          },
          "names": [
            {
              "C": "US",
              "L": "Portland",
              "O": "Kubernetes",
              "OU": "{{ kubernetes_cluster_name }}",
              "ST": "Somewhere nice"
            }
          ]
        }
      mode: 0600

  - name: Kubernetes | Control Plane | API Server | Server Certificate | generate
    shell: |
      pushd {{ pki_dir }}/api_server-server_cert ;

      cfssl gencert \
      -ca={{ root_ca_cert_file }} \
      -ca-key={{ root_ca_key_file }} \
      -config=signing-config.json \
      -hostname=127.0.0.1,kubernetes.default,{{ kubernetes_masters | map('extract', hostvars, 'ansible_all_ipv4_addresses') | list | flatten | join(',') }} \
      -profile=kubernetes \
      csr.json | cfssljson -bare api-server

      popd ;
    args:
        executable: bash

  - name: Kubernetes | Control Plane | API Server | Server Certificate | cleanup
    file: 
      path: "{{ pki_dir }}/api_server-server_cert/{{ item }}"
      state: absent
    with_items: 
    - signing-config.json
    - csr.json
    - api-server.csr

- name: Kubernetes | Control Plane | API Server | Distribute certificates
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}"
    mode: 0400
  with_items:
  - "{{ root_ca_cert_file }}"
  - "{{ root_ca_key_file }}"
  - "{{ pki_dir }}/api_server-server_cert/api-server.pem"
  - "{{ pki_dir }}/api_server-server_cert/api-server-key.pem"
  when: "'masters' in group_names"
  tags:
  - distribute_certificates
  - distribute_server_certificates
  - distribute_api_server_certificate